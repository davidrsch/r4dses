# Datos jerárquicos {#sec-rectangling}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
status("complete")
```

## Introducción

En este capítulo, aprenderá el arte de **rectangular** datos, tomando datos que son fundamentalmente jerárquicos, o en forma de árbol, y convirtiéndolos en un marco de datos rectangular formado por filas y columnas.
Esto es importante porque los datos jerárquicos son sorprendentemente comunes, especialmente cuando se trabaja con datos que provienen de la web.

Para obtener información sobre el rectángulo, primero deberá aprender sobre las listas, la estructura de datos que hace posible los datos jerárquicos.
Luego aprenderá sobre dos funciones cruciales de tidyr: `tidyr::unnest_longer()` y `tidyr::unnest_wider()`.
Luego le mostraremos algunos casos de estudio, aplicando estas funciones simples una y otra vez para resolver problemas reales.
Terminaremos hablando de JSON, la fuente más frecuente de conjuntos de datos jerárquicos y un formato común para el intercambio de datos en la web.

### Requisitos previos

En este capítulo, usaremos muchas funciones de tidyr, un miembro central de tidyverse.
También usaremos repurrrsive para proporcionar algunos conjuntos de datos interesantes para la práctica de rectángulos, y terminaremos usando jsonlite para leer archivos JSON en listas R.

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(repurrrsive)
library(jsonlite)
```

## Listas

Hasta ahora, ha trabajado con marcos de datos que contienen vectores simples como enteros, números, caracteres, fechas y horas y factores.
Estos vectores son simples porque son homogéneos: cada elemento es del mismo tipo de datos.
Si quieres almacenar elementos de diferentes tipos en el mismo vector, necesitarás una **lista**, que creas con `list()`:

```{r}
x1 <- list(1:4, "a", TRUE)
x1
```

A menudo es conveniente nombrar los componentes, o **hijos**, de una lista, lo que puede hacer de la misma manera que se nombran las columnas de un tibble:

```{r}
x2 <- list(a = 1:2, b = 1:3, c = 1:4)
x2
```

Incluso para estas listas tan simples, la impresión ocupa bastante espacio.
Una alternativa útil es `str()`, que genera una visualización compacta de la **estructura**, restando énfasis al contenido:

```{r}
str(x1)
str(x2)
```

Como puede ver, `str()` muestra cada hijo de la lista en su propia línea.
Muestra el nombre, si está presente, luego una abreviatura del tipo, luego los primeros valores.

### Jerarquía

Las listas pueden contener cualquier tipo de objeto, incluidas otras listas.
Esto los hace adecuados para representar estructuras jerárquicas (en forma de árbol):

```{r}
x3 <- list(list(1, 2), list(3, 4))
str(x3)
```

Esto es notablemente diferente a `c()`, que genera un vector plano:

```{r}
c(c(1, 2), c(3, 4))

x4 <- c(list(1, 2), list(3, 4))
str(x4)
```

A medida que las listas se vuelven más complejas, `str()` se vuelve más útil, ya que le permite ver la jerarquía de un vistazo:

```{r}
x5 <- list(1, list(2, list(3, list(4, list(5)))))
str(x5)
```

A medida que las listas se vuelven aún más grandes y complejas, `str()` eventualmente comienza a fallar, y deberá cambiar a `View()`[^rectangling-1].
@fig-view-collapsed muestra el resultado de llamar a `View(x4)`. El visor comienza mostrando solo el nivel superior de la lista, pero puede expandir interactivamente cualquiera de los componentes para ver más, como en @fig-view-expand-1. RStudio también le mostrará el código que necesita para acceder a ese elemento, como en @fig-view-expand-2. Volveremos sobre cómo funciona este código en @sec-subset-one.

[^rectangling-1]: Esta es una característica de RStudio.

```{r}
#| label: fig-view-collapsed
#| fig.cap: >
#|   La vista de RStudio le permite explorar de forma interactiva una lista compleja.
#|   El visor se abre mostrando solo el nivel superior de la lista.
#| fig.alt: >
#|   Una captura de pantalla de RStudio que muestra el visor de listas. 
#|   Muestra los dos hijos de x4: el primer hijo es un vector doble 
#|   y el segundo hijo es una lista. Un triable que mira hacia la 
#|   derecha indica que el segundo hijo en sí tiene hijos, pero no puede verlos.
#| echo: false
#| out-width: NULL

knitr::include_graphics("screenshots/View-1.png", dpi = 220)
```

```{r}
#| label: fig-view-expand-1
#| fig.cap: >
#|   Al hacer clic en el triángulo que mira hacia la derecha, se expande ese componente
#|   de la lista para que también puedas ver sus hijos.
#| fig.alt: >
#|   Otra captura de pantalla del visor de listas que expande el 
#|   segundo elemento secundario de x2. También tiene dos hijos, un 
#|   vector doble y otro de lista.
#| echo: false
#| out-width: NULL

knitr::include_graphics("screenshots/View-2.png", dpi = 220)
```

```{r}
#| label: fig-view-expand-2
#| fig.cap: >
#|   Puede repetir esta operación tantas veces como sea necesario para 
#|   llegar a los datos que le interesan. Tenga en cuenta la esquina inferior 
#|   izquierda: si hace clic en un elemento de la lista, RStudio le dará 
#|   el código de subconjunto necesario para acceder a él, en este 
#|   caso `x4[[2]][[2]][[2]]`.
#| fig.alt: >
#|   Otra captura de pantalla, habiendo ampliado el nieto de x4 para ver su
#|   dos niños, de nuevo un doble vector y una lista.
#| echo: false
#| out-width: NULL

knitr::include_graphics("screenshots/View-3.png", dpi = 220)
```

### Lista-columnas

Las listas también pueden vivir dentro de un tibble, donde las llamamos columnas de lista.
Las columnas de lista son útiles porque le permiten colocar objetos en un tibble que normalmente no pertenecerían allí.
En particular, las columnas de lista se usan mucho en el ecosistema [tidymodels](https://www.tidymodels.org), porque le permiten almacenar cosas como resultados de modelos o remuestreos en un marco de datos.

Aquí hay un ejemplo simple de una columna de lista:

```{r}
df <- tibble(
  x = 1:2, 
  y = c("a", "b"),
  z = list(list(1, 2), list(3, 4, 5))
)
df
```

No hay nada especial acerca de las listas en un tibble; se comportan como cualquier otra columna:

```{r}
df |> 
  filter(x == 1)
```

Computar con columnas de lista es más difícil, pero eso se debe a que computar con listas es más difícil en general; volveremos a eso en @sec-iteration.
En este capítulo, nos centraremos en convertir columnas de lista en variables regulares para que pueda usar sus herramientas existentes en ellas.

El método de impresión predeterminado solo muestra un resumen aproximado del contenido.
La columna de la lista podría ser arbitrariamente compleja, por lo que no hay una buena manera de imprimirla.
Si desea verlo, deberá extraer solo una columna de la lista y aplicar una de las técnicas que aprendió anteriormente, como `df |> pull(z) |> str()` o `df |> pull(z) |> Ver()`.

::: callout-note
## R base

Es posible poner una lista en una columna de un `data.frame`, pero es mucho más complicado porque `data.frame()` trata una lista como una lista de columnas:

```{r}
data.frame(x = list(1:3, 3:5))
```

Puede obligar a `data.frame()` a tratar una lista como una lista de filas envolviéndola en la lista `I()`, pero el resultado no se imprime particularmente bien:

```{r}
data.frame(
  x = I(list(1:2, 3:5)), 
  y = c("1, 2", "3, 4, 5")
)
```

Es más fácil usar columnas de lista con tibbles porque `tibble()` trata las listas como vectores y el método de impresión ha sido diseñado teniendo en cuenta las listas.
:::

## Anidando

Ahora que ha aprendido los conceptos básicos de las listas y las columnas de lista, exploremos cómo puede volver a convertirlas en filas y columnas regulares.
Aquí usaremos datos de muestra muy simples para que puedas tener una idea básica; en la siguiente sección cambiaremos a datos reales.

Las columnas de lista tienden a presentarse en dos formas básicas: con nombre y sin nombre.
Cuando los niños tienen **nombre**, tienden a tener los mismos nombres en todas las filas.
Por ejemplo, en `df1`, cada elemento de la columna de lista `y` tiene dos elementos llamados `a` y `b`.
Las columnas de lista con nombre se separan naturalmente en columnas: cada elemento con nombre se convierte en una nueva columna con nombre.

```{r}
df1 <- tribble(
  ~x, ~y,
  1, list(a = 11, b = 12),
  2, list(a = 21, b = 22),
  3, list(a = 31, b = 32),
)
```

Cuando los elementos secundarios **no tienen nombre**, la cantidad de elementos tiende a variar de una fila a otra.
Por ejemplo, en `df2`, los elementos de la columna de lista `y` no tienen nombre y varían en longitud de uno a tres.
Las columnas de lista sin nombre se anulan naturalmente en filas: obtendrá una fila para cada niño.

```{r}

df2 <- tribble(
  ~x, ~y,
  1, list(11, 12, 13),
  2, list(21),
  3, list(31, 32),
)
```

tidyr proporciona dos funciones para estos dos casos: `unnest_wider()` y `unnest_longer()`.
Las siguientes secciones explican cómo funcionan.

### `unnest_wider()`

Cuando cada fila tiene la misma cantidad de elementos con los mismos nombres, como `df1`, es natural poner cada componente en su propia columna con `unnest_wider()`:

```{r}
df1 |> 
  unnest_wider(y)
```

Por defecto, los nombres de las nuevas columnas provienen exclusivamente de los nombres de los elementos de la lista, pero puedes usar el argumento `names_sep` para solicitar que combinen el nombre de la columna y el nombre del elemento.
Esto es útil para eliminar la ambigüedad de los nombres repetidos.

```{r}
df1 |> 
  unnest_wider(y, names_sep = "_")
```

### `unnest_longer()`

Cuando cada fila contiene una lista sin nombre, lo más natural es poner cada elemento en su propia fila con `unnest_longer()`:

```{r}
df2 |> 
  unnest_longer(y)
```

Observe cómo `x` se duplica para cada elemento dentro de `y`: obtenemos una fila de salida para cada elemento dentro de la columna de lista.
Pero, ¿qué sucede si uno de los elementos está vacío, como en el siguiente ejemplo?

```{r}
df6 <- tribble(
  ~x, ~y,
  "a", list(1, 2),
  "b", list(3),
  "c", list()
)
df6 |> unnest_longer(y)
```

Obtenemos cero filas en la salida, por lo que la fila desaparece efectivamente.
Si desea conservar esa fila, agregue `NA` en `y` configurando `keep_empty = TRUE`.

### Tipos inconsistentes

¿Qué sucede si anulas una columna de lista que contiene diferentes tipos de vectores?
Por ejemplo, tome el siguiente conjunto de datos donde la columna de lista `y` contiene dos números, un factor y un lógico, que normalmente no se pueden mezclar en una sola columna.

```{r}
df4 <- tribble(
  ~x, ~y,
  "a", list(1),
  "b", list("a", TRUE, 5)
)
```

`unnest_longer()` siempre mantiene el conjunto de columnas sin cambios, mientras cambia el número de filas.
¿Qué es lo que ocurre?
¿Cómo `unnest_longer()` produce cinco filas mientras mantiene todo en `y`?

```{r}
df4 |> 
  unnest_longer(y)
```

Como puede ver, la salida contiene una columna de lista, pero cada elemento de la columna de lista contiene un solo elemento.
Debido a que `unnest_longer()` no puede encontrar un tipo común de vector, mantiene los tipos originales en una columna de lista.
Quizás se pregunte si esto rompe el mandamiento de que todos los elementos de una columna deben ser del mismo tipo.
No lo hace: cada elemento es una lista, aunque los contenidos sean de diferentes tipos.

Tratar con tipos inconsistentes es un desafío y los detalles dependen de la naturaleza precisa del problema y sus objetivos, pero lo más probable es que necesite herramientas de @sec-iteration.

### Otras funciones

tidyr tiene algunas otras funciones útiles de rectángulos que no vamos a cubrir en este libro:

-   `unnest_auto()` elige automáticamente entre `unnest_longer()` y `unnest_wider()` según la estructura de la columna de la lista. Es excelente para una exploración rápida, pero en última instancia es una mala idea porque no lo obliga a comprender cómo están estructurados sus datos y hace que su código sea más difícil de entender.
-   `unnest()` expande filas y columnas. Es útil cuando tiene una columna de lista que contiene una estructura 2d como un marco de datos, que no ve en este libro, pero que puede encontrar si usa el ecosistema [tidymodels](https://www.tmwr.org%20/base-r.html#combining-base-r-models-and-the-tidyverse).

Es bueno conocer estas funciones, ya que puede encontrarlas al leer el código de otras personas o al abordar desafíos de rectángulos más raros.

### Ejercicios

1.  ¿Qué sucede cuando usa `unnest_wider()` con columnas de lista sin nombre como `df2`?
    ¿Qué argumento es ahora necesario?
    ¿Qué sucede con los valores perdidos?

2.  ¿Qué sucede cuando usa `unnest_longer()` con columnas de lista con nombre como `df1`?
    ¿Qué información adicional obtienes en la salida?
    ¿Cómo puedes suprimir ese detalle extra?

3.  De vez en cuando se encuentra con marcos de datos con varias columnas de lista con valores alineados.
    Por ejemplo, en el siguiente marco de datos, los valores de `y` y `z` están alineados (es decir, `y` y `z` siempre tendrán la misma longitud dentro de una fila, y el primer valor de `y` corresponde a el primer valor de `z`).
    ¿Qué sucede si aplica dos llamadas `unnest_longer()` a este marco de datos?
    ¿Cómo puedes preservar la relación entre `x` e `y`?
    (Sugerencia: lea atentamente la documentación).

    ```{r}
    df4 <- tribble(
      ~x, ~y, ~z,
      "a", list("y-a-1", "y-a-2"), list("z-a-1", "z-a-2"),
      "b", list("y-b-1", "y-b-2", "y-b-3"), list("z-b-1", "z-b-2", "z-b-3")
    )
    ```

## Casos de estudio

La principal diferencia entre los ejemplos simples que usamos anteriormente y los datos reales es que los datos reales generalmente contienen múltiples niveles de anidamiento que requieren múltiples llamadas a `unnest_longer()` y/o `unnest_wider()`.
Para mostrar eso en acción, esta sección trabaja a través de tres desafíos reales de rectángulos utilizando conjuntos de datos del paquete repurrrsive.

### Datos muy amplios

Empezaremos con `gh_repos`.
Esta es una lista que contiene datos sobre una colección de repositorios de GitHub recuperados mediante la API de GitHub.
Es una lista muy anidada, por lo que es difícil mostrar la estructura en este libro; recomendamos explorar un poco por su cuenta con `View(gh_repos)` antes de continuar.

`gh_repos` es una lista, pero nuestras herramientas funcionan con columnas de lista, por lo que comenzaremos poniéndola en un tibble.
Llamamos a esta columna `json` por razones que veremos más adelante.

```{r}
repos <- tibble(json = gh_repos)
repos
```

Este tibble contiene 6 filas, una fila para cada hijo de `gh_repos`.
Cada fila contiene una lista sin nombre con 26 o 30 filas.
Como estos no tienen nombre, comenzaremos con `unnest_longer()` para poner a cada niño en su propia fila:

```{r}
repos |> 
  unnest_longer(json)
```

A primera vista, puede parecer que no hemos mejorado la situación: aunque tenemos más filas (176 en lugar de 6), cada elemento de `json` sigue siendo una lista.
Sin embargo, hay una diferencia importante: ahora cada elemento es una lista **nombrada**, por lo que podemos usar `unnest_wider()` para poner cada elemento en su propia columna:

```{r}
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) 
```

Esto ha funcionado, pero el resultado es un poco abrumador: ¡hay tantas columnas que tibble ni siquiera las imprime todas!
Podemos verlos todos con `names()`; y aquí nos fijamos en los 10 primeros:

```{r}
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) |> 
  names() |> 
  head(10)
```

Vamos a sacar algunos que parecen interesantes:

```{r}
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) |> 
  select(id, full_name, owner, description)
```

Puede usar esto para volver a comprender cómo se estructuró `gh_repos`: cada niño era un usuario de GitHub que contenía una lista de hasta 30 repositorios de GitHub que crearon.

`owner` es otra columna de lista, y dado que contiene una lista con nombre, podemos usar `unnest_wider()` para obtener los valores:

```{r}
#| error: true
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) |> 
  select(id, full_name, owner, description) |> 
  unnest_wider(owner)
```

Oh, oh, esta columna de lista también contiene una columna `id` y no podemos tener dos columnas `id` en el mismo marco de datos.
Como se sugiere, usemos `names_sep` para resolver el problema:

```{r}
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) |> 
  select(id, full_name, owner, description) |> 
  unnest_wider(owner, names_sep = "_")
```

Esto proporciona otro amplio conjunto de datos, pero puede tener la sensación de que `owner` parece contener una gran cantidad de datos adicionales sobre la persona que "posee" el repositorio.

### Datos relacionales

Los datos anidados a veces se usan para representar datos que normalmente distribuiríamos en varios marcos de datos.
Por ejemplo, tome `got_chars` que contiene datos sobre los personajes que aparecen en los libros y series de televisión de Game of Thrones.
Al igual que `gh_repos`, es una lista, por lo que comenzamos convirtiéndola en una columna de lista de un tibble:

```{r}
chars <- tibble(json = got_chars)
chars
```

La columna `json` contiene elementos con nombre, por lo que comenzaremos ampliándola:

```{r}
chars |> 
  unnest_wider(json)
```

Y seleccionando algunas columnas para que sea más fácil de leer:

```{r}
characters <- chars |> 
  unnest_wider(json) |> 
  select(id, name, gender, culture, born, died, alive)
characters
```

Este conjunto de datos también contiene muchas columnas de lista:

```{r}
chars |> 
  unnest_wider(json) |> 
  select(id, where(is.list))
```

Exploremos la columna `títulos`.
Es una columna de lista sin nombre, por lo que la dividiremos en filas:

```{r}
chars |> 
  unnest_wider(json) |> 
  select(id, titles) |> 
  unnest_longer(titles)
```

Es posible que espere ver estos datos en su propia tabla porque sería fácil unirlos a los datos de los caracteres según sea necesario.
Hagámoslo, lo que requiere poca limpieza: eliminar las filas que contienen cadenas vacías y cambiar el nombre de `titles` a `title` ya que cada fila ahora solo contiene un solo título.

```{r}
titles <- chars |> 
  unnest_wider(json) |> 
  select(id, titles) |> 
  unnest_longer(titles) |> 
  filter(titles != "") |> 
  rename(title = titles)
titles
```

Podría imaginarse crear una tabla como esta para cada una de las columnas de la lista y luego usar uniones para combinarlas con los datos de los caracteres según lo necesite.

### Profundamente anidado

Terminaremos estos estudios de caso con una columna de lista que está muy anidada y requiere rondas repetidas de `unnest_wider()` y `unnest_longer()` para desentrañar: `gmaps_cities`.
Este es un tibble de dos columnas que contiene cinco nombres de ciudades y los resultados del uso de la [API de codificación geográfica](https://developers.google.com/maps/documentation/geocoding) de Google para determinar su ubicación:

```{r}
gmaps_cities
```

`json` es una columna de lista con nombres internos, por lo que comenzamos con un `unnest_wider()`:

```{r}
gmaps_cities |> 
  unnest_wider(json)
```

Esto nos da el estado, `status`, y los resultados, `results`.
Dejaremos la columna de estado ya que todos están `OK`; en un análisis real, también querrá capturar todas las filas donde `status != "OK"` y descubrir qué salió mal.
`results` es una lista sin nombre, con uno o dos elementos (veremos por qué en breve), así que la dividiremos en filas:

```{r}
gmaps_cities |> 
  unnest_wider(json) |> 
  select(-status) |> 
  unnest_longer(results)
```

Ahora `results` es una lista con nombre, así que usaremos `unnest_wider()`:

```{r}
locations <- gmaps_cities |> 
  unnest_wider(json) |> 
  select(-status) |> 
  unnest_longer(results) |> 
  unnest_wider(results)
locations
```

Ahora podemos ver por qué dos ciudades obtuvieron dos resultados: Washington igualó tanto al estado de Washington como a Washington, DC, y Arlington igualó a Arlington, Virginia y Arlington, Texas.

Hay pocos lugares diferentes a los que podríamos ir desde aquí.
Es posible que deseemos determinar la ubicación exacta de la coincidencia, que se almacena en la columna de la lista `geometry`:

```{r}
locations |> 
  select(city, formatted_address, geometry) |> 
  unnest_wider(geometry)
```

Eso nos da nuevos límites, `bounds`, (una región rectangular) y ubicación, `location`, (un punto).
Podemos anular `location` para ver la latitud (`lat`) y la longitud (`lng`):

```{r}
locations |> 
  select(city, formatted_address, geometry) |> 
  unnest_wider(geometry) |> 
  unnest_wider(location)
```

Extraer los límites requiere algunos pasos más:

```{r}
locations |> 
  select(city, formatted_address, geometry) |> 
  unnest_wider(geometry) |> 
  # focus on the variables of interest
  select(!location:viewport) |>
  unnest_wider(bounds)
```

Luego renombramos `southwest` y `northeast` (las esquinas del rectángulo) para que podamos usar `names_sep` para crear nombres cortos pero evocadores:

```{r}
locations |> 
  select(city, formatted_address, geometry) |> 
  unnest_wider(geometry) |> 
  select(!location:viewport) |>
  unnest_wider(bounds) |> 
  rename(ne = northeast, sw = southwest) |> 
  unnest_wider(c(ne, sw), names_sep = "_") 
```

Tenga en cuenta cómo desanidamos dos columnas simultáneamente proporcionando un vector de nombres de variables a `unnest_wider()`.

Una vez que haya descubierto la ruta para llegar a los componentes que le interesan, puede extraerlos directamente usando otra función tidyr, `hoist()`:

```{r}
#| results: false
locations |> 
  select(city, formatted_address, geometry) |> 
  hoist(
    geometry,
    ne_lat = c("bounds", "northeast", "lat"),
    sw_lat = c("bounds", "southwest", "lat"),
    ne_lng = c("bounds", "northeast", "lng"),
    sw_lng = c("bounds", "southwest", "lng"),
  )
```

Si estos casos de estudio han abierto su apetito por más rectangulares de la vida real, puede ver algunos ejemplos más en \`vignette("rectangling", package = "tidyr")

### Ejercicios

1.  Calcula aproximadamente cuándo se creó `gh_repos`.
    ¿Por qué solo puedes estimar aproximadamente la fecha?

2.  La columna `owners` de `gh_repo` contiene mucha información duplicada porque cada propietario puede tener muchos repositorios.
    ¿Puede construir un marco de datos de `owners` que contenga una fila para cada propietario?
    (Pista: ¿`distinct()` funciona con `list-cols`?)

3.  Siga los pasos utilizados para los `titles` para crear tablas similares para los alias, lealtades, libros y series de televisión de los personajes de Game of Thrones.

4.  Explique el siguiente código línea por línea.
    ¿Por qué es interesante?
    ¿Por qué funciona para `got_chars` pero podría no funciona en general?

    ```{r}
    #| results: false
    tibble(json = got_chars) |> 
      unnest_wider(json) |> 
      select(id, where(is.list)) |> 
      pivot_longer(
        where(is.list), 
        names_to = "name", 
        values_to = "value"
      ) |>  
      unnest_longer(value)
    ```

5.  En `gmaps_cities`, ¿qué contiene `address_components`?
    ¿Por qué varía la longitud entre filas?
    Des anidalo apropiadamente para averiguarlo.
    (Pista: `types` siempre parece contener dos elementos. ¿Hace que sea más fácil trabajar con `unnest_wider()` que con `unnest_longer()`?)
    .

## JSON

Todos los estudios de casos de la sección anterior se obtuvieron de JSON.
JSON es la abreviatura de **j**ava**s**cript **o**bject **n**otation y es la forma en que la mayoría de las API web devuelven datos.
Es importante comprenderlo porque, si bien los tipos de datos de JSON y R son bastante similares, no existe un mapeo 1 a 1 perfecto, por lo que es bueno comprender un poco acerca de JSON si algo sale mal.

### Tipos de datos

JSON es un formato simple diseñado para ser leído y escrito fácilmente por máquinas, no por humanos.
Tiene seis tipos de datos clave.
Cuatro de ellos son escalares:

-   El tipo más simple es nulo (`null`) que juega el mismo papel que `NA` en R. Representa la ausencia de datos.
-   Una **cadena** es muy parecida a una cadena en R, pero siempre debe usar comillas dobles.
-   Un **número** es similar a los números de R: pueden usar notación entera (por ejemplo, 123), decimal (por ejemplo, 123,45) o científica (por ejemplo, 1,23e3). JSON no es compatible con `Inf`, `-Inf` o `NaN`.
-   Un **booleano** es similar a `TRUE` y `FALSE` de R, pero usa `true` y `false` en minúsculas.

Las cadenas, los números y los valores booleanos de JSON son bastante similares a los vectores de caracteres, numéricos y lógicos de R.
La principal diferencia es que los escalares de JSON solo pueden representar un único valor.
Para representar múltiples valores, debe usar uno de los dos tipos restantes: matrices y objetos.

Tanto las matrices como los objetos son similares a las listas en R; la diferencia es si tienen nombre o no.
Una **matriz** es como una lista sin nombre y se escribe con `[]`.
Por ejemplo, `[1, 2, 3]` es una matriz que contiene 3 números, y `[null, 1, "string", false]` es una matriz que contiene un valor nulo, un número, una cadena y un valor booleano.
Un **objeto** es como una lista con nombre y se escribe con `{}`.
Los nombres (claves en terminología JSON) son cadenas, por lo que deben estar entre comillas.
Por ejemplo, `{"x": 1, "y": 2}` es un objeto que asigna `x` a 1 e `y` a 2.

Tenga en cuenta que JSON no tiene ninguna forma nativa de representar fechas o fechas y horas, por lo que a menudo se almacenan como cadenas y deberá usar `readr::parse_date()` o `readr::parse_datetime()` para convertirlos en la estructura de datos correcta.
De manera similar, las reglas de JSON para representar números de punto flotante en JSON son un poco imprecisas, por lo que a veces también encontrará números almacenados en cadenas.
Aplique `readr::parse_double()` según sea necesario para obtener el tipo de variable correcto.

### jsonlite

Para convertir JSON en estructuras de datos R, recomendamos el paquete jsonlite, de Jeroen Ooms.
Usaremos solo dos funciones jsonlite: `read_json()` y `parse_json()`.
En la vida real, usará `read_json()` para leer un archivo JSON del disco.
Por ejemplo, el paquete repurrsive también proporciona la fuente de `gh_user` como un archivo JSON y puede leerlo con `read_json()`:

```{r}
# Una ruta a un archivo json dentro del paquete:
gh_users_json()

# Léalo con read_json()
gh_users2 <- read_json(gh_users_json())

# Verifique que sea igual a los datos que estábamos usando anteriormente
identical(gh_users, gh_users2)
```

En este libro, también usaremos `parse_json()`, ya que toma una cadena que contiene JSON, lo que lo hace bueno para generar ejemplos simples.
Para comenzar, aquí hay tres conjuntos de datos JSON simples, comenzando con un número, luego colocando algunos números en una matriz y luego colocando esa matriz en un objeto:

```{r}
str(parse_json('1'))
str(parse_json('[1, 2, 3]'))
str(parse_json('{"x": [1, 2, 3]}'))
```

jsonlite tiene otra función importante llamada `fromJSON()`.
No lo usamos aquí porque realiza una simplificación automática (`simplifyVector = TRUE`).
Esto a menudo funciona bien, particularmente en casos simples, pero creemos que es mejor que usted mismo haga el rectángulo para que sepa exactamente lo que está sucediendo y pueda manejar más fácilmente las estructuras anidadas más complicadas.

### Comenzando el proceso de rectangular

En la mayoría de los casos, los archivos JSON contienen una única matriz de nivel superior porque están diseñados para proporcionar datos sobre varias "cosas", p. varias páginas, varios registros o varios resultados.
En este caso, comenzará su rectángulo con `tibble(json)` para que cada elemento se convierta en una fila:

```{r}
json <- '[
  {"name": "John", "age": 34},
  {"name": "Susan", "age": 27}
]'
df <- tibble(json = parse_json(json))
df

df |> 
  unnest_wider(json)
```

En casos más raros, el archivo JSON consta de un solo objeto JSON de nivel superior, que representa una "cosa".
En este caso, deberá iniciar el proceso de rectangular envolviéndolo en una lista, antes de colocarlo en un tibble.

```{r}
json <- '{
  "status": "OK", 
  "results": [
    {"name": "John", "age": 34},
    {"name": "Susan", "age": 27}
 ]
}
'
df <- tibble(json = list(parse_json(json)))
df

df |> 
  unnest_wider(json) |> 
  unnest_longer(results) |> 
  unnest_wider(results)
```

Alternativamente, puede acceder al JSON analizado y comenzar con la parte que realmente le interesa:

```{r}
df <- tibble(results = parse_json(json)$results)
df |> 
  unnest_wider(results)
```

### Ejercicios

1.  Rectángulo `df_col` y `df_row` a continuación.
    Representan las dos formas de codificar un marco de datos en JSON.

    ```{r}
    json_col <- parse_json('
      {
        "x": ["a", "x", "z"],
        "y": [10, null, 3]
      }
    ')
    json_row <- parse_json('
      [
        {"x": "a", "y": 10},
        {"x": "x", "y": null},
        {"x": "z", "y": 3}
      ]
    ')

    df_col <- tibble(json = list(json_col)) 
    df_row <- tibble(json = json_row)
    ```

## Resumen

En este capítulo, aprendió qué son las listas, cómo puede generarlas a partir de archivos JSON y cómo convertirlas en marcos de datos rectangulares.
Sorprendentemente, solo necesitamos dos funciones nuevas: `unnest_longer()` para colocar los elementos de la lista en filas y `unnest_wider()` para colocar los elementos de la lista en columnas.
No importa cuán profundamente anidada esté la columna de la lista, todo lo que necesita hacer es llamar repetidamente a estas dos funciones.

JSON es el formato de datos más común devuelto por las API web.
¿Qué sucede si el sitio web no tiene una API, pero puede ver los datos que desea en el sitio web?
Ese es el tema del próximo capítulo: web scraping, extracción de datos de páginas web HTML.
