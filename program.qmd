# Programa {#sec-program-intro .unnumbered}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
```

En esta parte del libro, mejorará sus habilidades de programación.
La programación es una habilidad transversal necesaria para todo el trabajo de ciencia de datos: debe usar una computadora para hacer ciencia de datos; no puedes hacerlo en tu cabeza, o con lápiz y papel.

```{r}
#| label: fig-ds-program
#| echo: false
#| out.width: ~
#| fig-cap: >
#|   La programación es el agua en la que nadan todos los demás componentes.
#| fig-alt: >
#|   Nuestro modelo del proceso de ciencia de datos con programa
#|   (importar, ordenar, transformar, visualizar, modelar y comunicar,
#|   es decir, todo) resaltado en azul.

knitr::include_graphics("diagrams/data-science/program.png", dpi = 270)
```

La programación produce código, y el código es una herramienta de comunicación.
Obviamente, el código le dice a la computadora lo que quieres que haga.
Pero también comunica significado a otros humanos.
Pensar en el código como un vehículo para la comunicación es importante porque cada proyecto que haces es fundamentalmente colaborativo.
Incluso si no está trabajando con otras personas, ¡definitivamente estará trabajando con usted en el futuro!
Escribir un código claro es importante para que otros (como usted en el futuro) puedan entender por qué abordó un análisis de la forma en que lo hizo.
Eso significa que mejorar en la programación también implica mejorar en la comunicación.
Con el tiempo, desea que su código sea no solo más fácil de escribir, sino más fácil de leer para los demás.

En los siguientes tres capítulos, aprenderá habilidades para mejorar sus habilidades de programación:

1.  Copiar y pegar es una herramienta poderosa, pero debes evitar hacerlo más de dos veces.
    Repetirse en el código es peligroso porque puede conducir fácilmente a errores e inconsistencias.
    En cambio, en @sec-functions, aprenderá a escribir **funciones** que le permitirán extraer código tidyverse repetido para que pueda reutilizarse fácilmente.

2.  Las funciones extraen código repetido, pero a menudo necesita repetir las mismas acciones en diferentes entradas.
    Necesita herramientas para **iteración** que le permitan hacer cosas similares una y otra vez.
    Estas herramientas incluyen bucles for y programación funcional, que aprenderá en @sec-iteration.

3.  A medida que lea más código escrito por otros, verá más código que no usa el tidyverse.
    En @sec-base-r, aprenderá algunas de las funciones básicas de R más importantes que verá en la naturaleza.

El objetivo de estos capítulos es enseñarle lo mínimo sobre programación que necesita para la ciencia de datos.
Una vez que haya dominado el material aquí, le recomendamos que continúe invirtiendo en sus habilidades de programación.
Hemos escrito dos libros que pueden resultarle útiles.
[*Hands on Programming with R*](https://rstudio-education.github.io/hopr/), de Garrett Grolemund, es una introducción a R como lenguaje de programación y es un excelente lugar para comenzar si R es su primer lenguaje de programación.
[*Advanced R*](https://adv-r.hadley.nz/) por Hadley Wickham se sumerge en los detalles de el lenguaje de programación R; es un excelente lugar para comenzar si ya tiene experiencia en programación y un excelente próximo paso una vez que haya interiorizado las ideas de estos capítulos.
