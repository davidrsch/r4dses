# Caracteres {#sec-strings}

```{r}
#| results: "asis"
#| echo: false

source("_common.R")
status("complete")
```

## Introducción

Hasta ahora, ha usado un montón de cadenas de caracteres sin aprender mucho sobre los detalles.
Ahora es el momento de sumergirse en ellas, aprender qué hace que las cadenas de caracteres funcionen y dominar algunas de las poderosas herramientas de manipulación de caracteres que tiene a su disposición.

Comenzaremos con los detalles de la creación de cadenas y vectores de caracteres.
Luego se sumergirá en la creación de cadenas a partir de datos, luego lo contrario; extraer cadenas de datos.
Luego hablaremos de las herramientas que funcionan con letras individuales.
El capítulo finaliza con funciones que funcionan con letras individuales y una breve discusión sobre dónde podrían equivocarse sus expectativas del inglés al trabajar con otros idiomas.

Seguiremos trabajando con cadenas en el próximo capítulo, donde aprenderá más sobre el poder de las expresiones regulares.

### Requisitos previos

En este capítulo, usaremos funciones del paquete stringr, que forma parte del núcleo tidyverse.
También usaremos los datos de babynames ya que proporciona algunas cadenas divertidas para manipular.

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(babynames)
```

Puede saber rápidamente cuándo está usando una función stringr porque todas las funciones stringr comienzan con `str_`.
Esto es particularmente útil si usa RStudio porque escribir `str_` activará el autocompletado, lo que le permitirá refrescar su memoria de las funciones disponibles.

```{r}
#| echo: false

knitr::include_graphics("screenshots/stringr-autocomplete.png")
```

## Creando una cadena de caracteres

Hemos creado cadenas de pasada anteriormente en el libro, pero no discutimos los detalles.
En primer lugar, puede crear una cadena usando comillas simples (`'`) o comillas dobles (`"`).
No hay diferencia en el comportamiento entre los dos, así que en aras de la coherencia, la [guía de estilo de tidyverse](https://style.tidyverse.org/syntax.html#character-vectors) recomienda usar `"`, a menos que la cadena contiene múltiples `"`.

```{r}
string1 <- "Esta es una cadena de caracteres"
string2 <- 'Si quiero incluir una "comilla" dentro de una cadena, uso comillas simples'
```

Si olvida cerrar una comilla, verá `+`, el indicador de continuación:

```         
> "Esta es una cadena sin comillas de cierre
+ 
+ 
+ AYUDA ESTOY ATRAPADO EN UNA CADENA
```

Si esto le sucede y no sabe qué comilla cerrar, presione Escape para cancelar y vuelva a intentarlo.

### Escapadas

Para incluir una comilla simple o doble literal en una cadena, puede usar `\` para "escaparla":

```{r}
double_quote <- "\"" # o '"'
single_quote <- '\'' # o "'"
```

Entonces, si desea incluir una barra invertida literal en su cadena, deberá escapar: `"\\"`:

```{r}
backslash <- "\\"
```

Tenga en cuenta que la representación impresa de una cadena no es la misma que la cadena misma porque la representación impresa muestra los escapes (en otras palabras, cuando imprime una cadena, puede copiar y pegar la salida para recrear esa cadena).
Para ver el contenido sin procesar de la cadena, use `str_view()`[^strings-1]:

[^strings-1]: O usa la función base R `writeLines()`.

```{r}
x <- c(single_quote, double_quote, backslash)
x

str_view(x)
```

### Cadenas de caracteres sin procesar {#sec-raw-strings}

Crear una cadena con múltiples comillas o barras invertidas se vuelve confuso rápidamente.
Para ilustrar el problema, creemos una cadena que contenga el contenido del bloque de código donde definimos las variables `double_quote` y `single_quote`:

```{r}
tricky <- "double_quote <- \"\\\"\" # o '\"'
single_quote <- '\\'' # o \"'\""
str_view(tricky)
```

¡Eso es un montón de barras invertidas!
(Esto a veces se llama \[síndrome del palillo inclinado\] (https://en.wikipedia.org/wiki/Leaning_toothpick_syndrome).) Para eliminar el escape, puede usar una **cadena de caracteres sin procesar**[^strings-2]:

[^strings-2]: Disponible en R 4.0.0 y superior.

```{r}
tricky <- r"(double_quote <- "\"" # or '"'
single_quote <- '\'' # or "'")"
str_view(tricky)
```

Una cadena sin procesar generalmente comienza con `r"(` y termina con `)"`.
Pero si su cadena contiene `)"`, puede usar `r"[]"` o `r"{}"`, y si eso aún no es suficiente, puede insertar cualquier número de guiones para hacer los pares de apertura y cierre único, por ejemplo, `` `r"--()--" ``, `` `r"---()---" ``, etc. Las cadenas sin procesar son lo suficientemente flexibles para manejar cualquier texto.

### Otros caracteres especiales

Además de `\"`, `\'` y `\\`, hay otros caracteres especiales que pueden ser útiles. Los más comunes son `\n`, una nueva línea y `\t`, tabulador. A veces también verá cadenas que contienen escapes Unicode que comienzan con `\u` o `\U`. Esta es una forma de escribir caracteres no ingleses que funcionan en todos los sistemas. Puede ver la lista completa de otros caracteres especiales en `?Quote`.

```{r}
x <- c("one\ntwo", "one\ttwo", "\u00b5", "\U0001f604")
x
str_view(x)
```

Tenga en cuenta que `str_view()` usa un fondo azul para las pestañas para que sean más fáciles de detectar.
Uno de los desafíos de trabajar con texto es que hay una variedad de formas en que los espacios en blanco pueden terminar en el texto, por lo que este fondo lo ayuda a reconocer que algo extraño está sucediendo.

### Ejercicios

1.  Cree cadenas que contengan los siguientes valores:

    1.  `Él dijo: "¡Eso es increíble!"`

    2.  `\a\b\c\d`

    3.  `\\\\\\`

2.  Cree la cadena en su sesión R e imprímala.
    ¿Qué sucede con el especial "\\u00a0"?
    ¿Cómo lo muestra `str_view()`?
    ¿Puedes googlear un poco para averiguar qué es este carácter especial?

    ```{r}
    x <- "Esto\u00a0es\u00a0complicado"
    ```

## Crear muchas cadenas de caracteres a partir de datos

Ahora que ha aprendido los conceptos básicos para crear una o dos cadenas "a mano", entraremos en los detalles de la creación de cadenas a partir de otras cadenas.
Esto lo ayudará a resolver el problema común en el que tiene un texto que escribió que desea combinar con cadenas de un data frame.
Por ejemplo, puede combinar "Hola" con una variable `name` para crear un saludo.
Le mostraremos cómo hacer esto con `str_c()` y `str_glue()` y cómo puede usarlos con `mutate()`.
Naturalmente, eso plantea la pregunta de qué funciones de cadena podría usar con `summarize()`, por lo que terminaremos esta sección con una discusión de `str_flatten()`, que es una función de resumen para cadenas.

### `str_c()`

`str_c()` toma cualquier número de vectores como argumentos y devuelve un vector de caracteres:

```{r}
str_c("x", "y")
str_c("x", "y", "z")
str_c("Hola ", c("Juan", "Susana"))
```

`str_c()` es muy similar a la base `paste0()`, pero está diseñado para usarse con `mutate()` obedeciendo las reglas habituales de tidyverse para reciclar y propagar valores faltantes:

```{r}
df <- tibble(name = c("Flora", "David", "Terra", NA))
df |> mutate(greeting = str_c("Hi ", name, "!"))
```

Si desea que los valores faltantes se muestren de otra manera, use `coalesce()` para reemplazarlos.
Dependiendo de lo que quieras, puedes usarlo dentro o fuera de `str_c()`:

```{r}
df |> 
  mutate(
    greeting1 = str_c("Hi ", coalesce(name, "you"), "!"),
    greeting2 = coalesce(str_c("Hi ", name, "!"), "Hi!")
  )
```

### `str_glue()` {#sec-glue}

Si está mezclando muchas cadenas fijas y variables con `str_c()`, notará que escribe muchas `"`s, lo que dificulta ver el objetivo general del código. Un enfoque alternativo es proporcionado por el [paquete glue](https://glue.tidyverse.org) a través de `str_glue()`[^strings-3]. Le das una sola cadena que tiene una característica especial: cualquier cosa dentro de `{}` se evaluará como que está fuera de las comillas:

[^strings-3]: Si no está usando stringr, también puede acceder a él directamente con `glue::glue()`.

```{r}
df |> mutate(greeting = str_glue("Hola {name}!"))
```

Como puede ver, `str_glue()` actualmente convierte los valores faltantes a la cadena `"NA"`, desafortunadamente, lo que lo hace inconsistente con `str_c()`.

También puede preguntarse qué sucede si necesita incluir un `{` o `}` regular en su cadena.
Estás en el camino correcto si crees que necesitarás escapar de alguna manera.
El truco es que el pegamento usa una técnica de escape ligeramente diferente; en lugar de anteponer un carácter especial como `\`, se duplican los caracteres especiales:

```{r}
df |> mutate(greeting = str_glue("{{Hola {name}!}}"))
```

### `str_flatten()`

`str_c()` y `glue()` funciona bien con `mutate()` porque su salida tiene la misma longitud que sus entradas.
¿Qué pasa si quieres una función que funcione bien con `summarize()`, es decir, algo que siempre devuelva una sola cadena?
Ese es el trabajo de `str_flatten()`[^strings-4]: toma un vector de caracteres y combina cada elemento del vector en una sola cadena:

[^strings-4]: El equivalente base de R es `paste()` usado con el argumento `collapse`.

```{r}
str_flatten(c("x", "y", "z"))
str_flatten(c("x", "y", "z"), ", ")
str_flatten(c("x", "y", "z"), ", ", last = ", and ")
```

Esto hace que funcione bien con `summarize()`:

```{r}
df <- tribble(
  ~ name, ~ fruit,
  "Carmen", "banana",
  "Carmen", "apple",
  "Marvin", "nectarine",
  "Terence", "cantaloupe",
  "Terence", "papaya",
  "Terence", "mandarin"
)
df |>
  group_by(name) |> 
  summarize(fruits = str_flatten(fruit, ", "))
```

### Ejercicios

1.  Compare y contraste los resultados de `paste0()` con `str_c()` para las siguientes entradas:

    ```{r}
    #| eval: false

    str_c("hi ", NA)
    str_c(letters[1:2], letters[1:3])
    ```

2.  ¿Cuál es la diferencia entre `paste()` y `paste0()`?
    ¿Cómo puedes recrear el equivalente de `paste()` con `str_c()`?

3.  Convierta las siguientes expresiones de `str_c()` a `str_glue()` o viceversa:

    a.  `str_c("El precio de ", food, " es ", price)`

    b.  `str_glue("Yo tengo {age} años y vivo en {country}")`

    c.  `str_c("\\section{", title, "}")`

## Extraer datos de cadenas de caracteres

Es muy común que varias variables se amontonen en una sola cadena.
En esta sección, aprenderá a utilizar cuatro funciones tidyr para extraerlas:

-   `df |> separate_longer_delim(col, delim)`
-   `df |> separate_longer_position(col, width)`
-   `df |> separate_wider_delim(col, delim, names)`
-   `df |> separate_wider_position(col, widths)`

Si miras de cerca, puedes ver que hay un patrón común aquí: `separate_`, luego `longer` o `wider`, luego `_`, luego por `delim` o `position`.
Eso es porque estas cuatro funciones se componen de dos primitivas más simples: - Al igual que con `pivot_longer()` y `pivot_wider()`, las funciones `_longer` hacen que el data frame de entrada sea más largo al crear nuevas filas y las funciones `_wider` hacen que el data frame de entrada sea más ancho al generar nuevas columnas.
- `delim` divide una cadena con un delimitador como `", "` o `" "`; `position` se divide en anchos específicos, como `c(3, 5, 2)`.

Volveremos al último miembro de esta familia, `separate_regex_wider()`, en @sec-regular-expressions.
Es la más flexible de las funciones `wider`, pero necesita saber algo acerca de las expresiones regulares antes de poder usarla.

Las siguientes dos secciones le darán la idea básica detrás de estas funciones separadas, primero separándolas en filas (que es un poco más simple) y luego separándolas en columnas.
Terminaremos discutiendo las herramientas que le brindan las funciones `wider` para diagnosticar problemas.

### Separando en filas

Separar una cadena en filas tiende a ser más útil cuando el número de componentes varía de una fila a otra.
El caso más común requiere que `separate_longer_delim()` se divida en función de un delimitador:

```{r}
df1 <- tibble(x = c("a,b,c", "d,e", "f"))
df1 |> 
  separate_longer_delim(x, delim = ",")
```

Es más raro ver `separate_longer_position()` en la naturaleza, pero algunos conjuntos de datos más antiguos usan un formato muy compacto donde cada carácter se usa para registrar un valor:

```{r}
df2 <- tibble(x = c("1211", "131", "21"))
df2 |> 
  separate_longer_position(x, width = 1)
```

### Separando en columnas {#sec-string-columns}

Separar una cadena en columnas tiende a ser más útil cuando hay un número fijo de componentes en cada cadena y desea distribuirlos en columnas.
Son un poco más complicados que sus equivalentes `longer` porque necesitas nombrar las columnas.
Por ejemplo, en el siguiente conjunto de datos, `x` se compone de un código, un número de edición y un año, separados por `"."`.
Para usar `separate_wider_delim()`, proporcionamos el delimitador y los nombres en dos argumentos:

```{r}
df3 <- tibble(x = c("a10.1.2022", "b10.2.2011", "e15.1.2015"))
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", "edition", "year")
  )
```

Si una pieza específica no es útil, puede usar un nombre `NA` para omitirla de los resultados:

```{r}
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", NA, "year")
  )
```

`separate_wider_position()` funciona un poco diferente porque normalmente desea especificar el ancho de cada columna.
Entonces le das un vector entero con nombre, donde el nombre da el nombre de la nueva columna, y el valor es la cantidad de caracteres que ocupa.
Puede omitir valores de la salida si no los nombra:

```{r}
df4 <- tibble(x = c("202215TX", "202122LA", "202325CA")) 
df4 |> 
  separate_wider_position(
    x,
    widths = c(year = 4, age = 2, state = 2)
  )
```

### Diagnóstico de problemas de ensanchamiento

`separate_wider_delim()`[^strings-5] requiere un conjunto fijo y conocido de columnas.
¿Qué sucede si alguna de las filas no tiene el número esperado de piezas?
Hay dos posibles problemas, muy pocas o demasiadas piezas, por lo que `separate_wider_delim()` proporciona dos argumentos para ayudar: `too_few` y `too_many`. Primero veamos el caso `too_few` con el siguiente conjunto de datos de muestra:

[^strings-5]: Los mismos principios se aplican a `separate_wider_position()` y `separate_wider_regex()`.

```{r}
#| error: true
df <- tibble(x = c("1-1-1", "1-1-2", "1-3", "1-3-2", "1"))

df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z")
  )
```

Notará que recibimos un error, pero el error nos da algunas sugerencias sobre cómo puede proceder.
Comencemos por depurar el problema:

```{r}
debug <- df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_few = "debug"
  )
debug
```

Cuando usa el modo de depuración, obtiene tres columnas adicionales agregadas a la salida: `x_ok`, `x_pieces` y `x_remainder` (si separa una variable con un nombre diferente, obtendrá un prefijo diferente).
Aquí, `x_ok` te permite encontrar rápidamente las entradas que fallaron:

```{r}
debug |> filter(!x_ok)
```

`x_pieces` nos dice cuántas piezas se encontraron, en comparación con las 3 esperadas (la longitud de `names`).
`x_remainder` no es útil cuando hay muy pocas piezas, pero lo veremos de nuevo en breve.

A veces, mirar esta información de depuración revelará un problema con su estrategia de delimitación o sugerirá que necesita hacer más preprocesamiento antes de separarse.
En ese caso, solucione el problema aguas arriba y asegúrese de eliminar `too_few = "debug"` para asegurarse de que los nuevos problemas se conviertan en errores.

En otros casos, es posible que desee completar las piezas que faltan con "NA" y seguir adelante.
Ese es el trabajo de `too_few = "align_start"` y `too_few = "align_end"` que le permiten controlar dónde deben ir los `NA`:

```{r}
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_few = "align_start"
  )
```

Los mismos principios se aplican si tiene demasiadas piezas:

```{r}
#| error: true
df <- tibble(x = c("1-1-1", "1-1-2", "1-3-5-6", "1-3-2", "1-3-5-7-9"))

df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z")
  )
```

Pero ahora, cuando depuramos el resultado, puedes ver el propósito de `x_remainder`:

```{r}
debug <- df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "debug"
  )
debug |> filter(!x_ok)
```

Tiene un conjunto ligeramente diferente de opciones para manejar demasiadas piezas: puede "soltar" silenciosamente cualquier pieza adicional o "fusionarlas" todas en la columna final:

```{r}
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "drop"
  )


df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "merge"
  )
```

## Letras

En esta sección, le presentaremos funciones que le permitirán trabajar con letras individuales dentro de una cadena.
Aprenderá a encontrar la longitud de una cadena, extraer subcadenas y manejar cadenas largas en diagramas y tablas.

### Longitud

`str_length()` te dice el número de letras en la cadena:

```{r}
str_length(c("a", "R for data science", NA))
```

Podría usar esto con `count()` para encontrar la distribución de las longitudes de los nombres de bebés de EE.
UU.
y luego con `filter()` para ver los nombres más largos, que tienen 15 letras [^strings-6]:

[^strings-6]: Mirando estas entradas, supondríamos que los datos de babynames eliminan espacios o guiones y se truncan después de 15 letras.

```{r}
babynames |>
  count(length = str_length(name), wt = n)

babynames |> 
  filter(str_length(name) == 15) |> 
  count(name, wt = n, sort = TRUE)
```

### Subconjunto

Puedes extraer partes de una cadena usando `str_sub(string, start, end)`, donde `start` y `end` son las posiciones donde la subcadena debe comenzar y terminar.
Los argumentos `start` y `end` son inclusivos, por lo que la longitud de la cadena devuelta será `end - start + 1`:

```{r}
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
```

Puede usar valores negativos para contar hacia atrás desde el final de la cadena: -1 es el último carácter, -2 es el penúltimo carácter, etc.

```{r}
str_sub(x, -3, -1)
```

Tenga en cuenta que `str_sub()` no fallará si la cadena es demasiado corta: solo devolverá tanto como sea posible:

```{r}
str_sub("a", 1, 5)
```

Podríamos usar `str_sub()` con `mutate()` para encontrar la primera y última letra de cada nombre:

```{r}
babynames |> 
  mutate(
    first = str_sub(name, 1, 1),
    last = str_sub(name, -1, -1)
  )
```

### Ejercicios

1.  ¿Cuando calculamos la distribución de la longitud de los nombres de los bebés, ¿por qué usamos `wt = n`?
2.  Use `str_length()` y `str_sub()` para extraer la letra del medio de cada nombre de bebé. ¿Qué harás si la cadena tiene un número par de caracteres?
3.  ¿Existen tendencias importantes en la longitud de los nombres de bebés a lo largo del tiempo? ¿Qué pasa con la popularidad de las primeras y últimas letras?

## Texto no inglés {#sec-other-languages}

Hasta ahora, nos hemos centrado en el texto en inglés, con el que es particularmente fácil trabajar por dos razones.
En primer lugar, el alfabeto inglés es relativamente simple: solo hay 26 letras.
En segundo lugar (y quizás más importante), la infraestructura informática que usamos hoy en día fue diseñada predominantemente por angloparlantes.
Desafortunadamente, no tenemos espacio para un tratamiento completo de los idiomas distintos del inglés.
Aún así, queríamos llamar su atención sobre algunos de los mayores desafíos que podría encontrar: codificación, variaciones de letras y funciones dependientes de la configuración regional.

### Codificación

Cuando se trabaja con texto que no está en inglés, el primer desafío suele ser la **codificación**.
Para entender lo que está pasando, necesitamos sumergirnos en cómo las computadoras representan cadenas.
En R, podemos llegar a la representación subyacente de una cadena usando `charToRaw()`:

```{r}
charToRaw("Hadley")
```

Cada uno de estos seis números hexadecimales representa una letra: `48` es H, `61` es a, y así sucesivamente.
La asignación de un número hexadecimal a un carácter se denomina codificación y, en este caso, la codificación se denomina ASCII.
ASCII hace un gran trabajo al representar los caracteres ingleses porque es el código estándar **estadounidense** para el intercambio de información.

Las cosas no son tan fáciles para otros idiomas además del inglés.
En los primeros días de la informática, existían muchos estándares en competencia para codificar caracteres no ingleses.
Por ejemplo, había dos codificaciones diferentes para Europa: Latin1 (también conocido como ISO-8859-1) se usaba para los idiomas de Europa occidental, y Latin2 (también conocido como ISO-8859-2) se usaba para los idiomas de Europa Central.
En Latin1, el byte `b1` es "±", pero en Latin2, ¡es "±"!
Afortunadamente, hoy en día existe un estándar que se admite en casi todas partes: UTF-8.
UTF-8 puede codificar casi todos los caracteres utilizados por los humanos en la actualidad y muchos símbolos adicionales como emojis.

readr usa UTF-8 en todas partes.
Este es un buen valor predeterminado, pero fallará para los datos producidos por sistemas más antiguos que no usan UTF-8.
Si esto sucede, sus cadenas se verán raras cuando las imprima.
A veces, solo uno o dos caracteres pueden estar en mal estado; otras veces, obtendrás un completo galimatías.
Por ejemplo, aquí hay dos CSV en línea con codificaciones inusuales [^strings-7]:

[^strings-7]: Aquí estoy usando el `\x` especial para codificar datos binarios directamente en una cadena.

```{r}
#| message: false
x1 <- "text\nEl Ni\xf1o fue particularmente malo este año"
read_csv(x1)

x2 <- "text\n\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
read_csv(x2)
```

Para leerlos correctamente, especifica la codificación a través del argumento `locale`:

```{r}
#| message: false
read_csv(x1, locale = locale(encoding = "Latin1"))

read_csv(x2, locale = locale(encoding = "Shift-JIS"))
```

¿Cómo encuentras la codificación correcta?
Si tiene suerte, se incluirá en algún lugar de la documentación de datos.
Desafortunadamente, ese rara vez es el caso, por lo que readr proporciona `guess_encoding()` para ayudarlo a resolverlo.
No es infalible y funciona mejor cuando tiene mucho texto (a diferencia de aquí), pero es un lugar razonable para comenzar.
Espere probar algunas codificaciones diferentes antes de encontrar la correcta.

Las codificaciones son un tema rico y complejo; solo hemos arañado la superficie aquí.
Si desea obtener más información, le recomendamos leer la explicación detallada en <http://kunststube.net/encoding/>.

### Variaciones de letras

Trabajar en idiomas con acentos plantea un desafío significativo al determinar la posición de las letras (por ejemplo, con `str_length()` y `str_sub()`), ya que las letras acentuadas pueden codificarse como un solo carácter individual (por ejemplo, ü) o como dos caracteres por combinar una letra sin acento (por ejemplo, u) con un signo diacrítico (por ejemplo, ¨).
Por ejemplo, este código muestra dos formas de representar ü que parecen idénticas:

```{r}
u <- c("\u00fc", "u\u0308")
str_view(u)
```

Pero ambas cadenas difieren en longitud y sus primeros caracteres son diferentes:

```{r}
str_length(u)
str_sub(u, 1, 1)
```

Finalmente, tenga en cuenta que una comparación de estas cadenas con `==` interpreta estas cadenas como diferentes, mientras que la práctica función `str_equal()` en stringr reconoce que ambas tienen la misma apariencia:

```{r}
u[[1]] == u[[2]]

str_equal(u[[1]], u[[2]])
```

### Funciones dependientes de la configuración regional

Finalmente, hay un puñado de funciones stringr cuyo comportamiento depende de tu **locale**.
Una configuración regional es similar a un idioma, pero incluye un especificador de región opcional para manejar las variaciones regionales dentro de un idioma.
Una configuración regional se especifica mediante una abreviatura de idioma en minúsculas, seguida opcionalmente por un `_` y un identificador de región en mayúsculas.
Por ejemplo, "en" es inglés, "en_GB" es inglés británico y "en_US" es inglés americano.
Si aún no conoce el código de su idioma, [Wikipedia](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) tiene una buena lista, y puede ver cuáles son compatibles con stringr mirando `stringi::stri_locale_list()`.

Las funciones de cadena base R utilizan automáticamente la configuración regional establecida por su sistema operativo.
Esto significa que las funciones base de cadena R hacen lo que espera para su idioma, pero su código podría funcionar de manera diferente si lo comparte con alguien que vive en un país diferente.
Para evitar este problema, stringr utiliza por defecto las reglas en inglés utilizando la configuración regional "en" y requiere que especifique el argumento `locale` para anularlo.
Afortunadamente, hay dos conjuntos de funciones donde la configuración regional realmente importa: cambio de mayúsculas y minúsculas y clasificación.

Las reglas para cambiar entre mayúsculas y minúsculas difieren entre idiomas.
Por ejemplo, el turco tiene dos i: con y sin punto.
Como son dos letras distintas, se escriben en mayúsculas de manera diferente:

```{r}
str_to_upper(c("i", "ı"))
str_to_upper(c("i", "ı"), locale = "tr")
```

¡La clasificación de las cadenas depende del orden del alfabeto, y el orden del alfabeto no es el mismo en todos los idiomas [^strings-8]!
He aquí un ejemplo: en checo, "ch" es una letra compuesta que aparece después de la `h` en el alfabeto.

[^strings-8]: Clasificar en idiomas que no tienen alfabeto, como el chino, es aún más complicado.

```{r}
str_sort(c("a", "c", "ch", "h", "z"))
str_sort(c("a", "c", "ch", "h", "z"), locale = "cs")
```

Esto también surge al ordenar cadenas con `dplyr::arrange()`, por lo que también tiene un argumento `locale`.

## Resumen

En este capítulo, aprendió algo sobre el poder del paquete stringr: cómo crear, combinar y extraer cadenas, y sobre algunos de los desafíos que puede enfrentar con cadenas que no están en inglés.
Ahora es el momento de aprender una de las herramientas más importantes y poderosas para trabajar con cadenas: las expresiones regulares.
Las expresiones regulares son un lenguaje muy conciso pero muy expresivo para describir patrones dentro de cadenas y son el tema del próximo capítulo.
