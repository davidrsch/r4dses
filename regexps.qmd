# Expresiones regulares {#sec-regular-expressions}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
status("complete")
```

## Introducción

En @sec-strings, aprendió un montón de funciones útiles para trabajar con cadenas.
Este capítulo se centrará en funciones que usan **expresiones regulares**, un lenguaje conciso y poderoso para describir patrones dentro de cadenas.
El término "expresión regular" es un poco complicado, por lo que la mayoría de la gente lo abrevia como "regex"[^regexps-1] (del inglés, "regular expressions") o "regexp".

[^regexps-1]: Puede pronunciarlo con una g dura (reg-x) o una g suave (rej-x).

El capítulo comienza con los conceptos básicos de las expresiones regulares y las funciones stringr más útiles para el análisis de datos.
Luego, ampliaremos su conocimiento de los patrones y cubriremos siete temas nuevos e importantes (escape, anclaje, clases de caracteres, clases de taquigrafía, cuantificadores, precedencia y agrupación).
A continuación, hablaremos sobre algunos de los otros tipos de patrones con los que pueden trabajar las funciones stringr y las diversas "banderas" que le permiten modificar el funcionamiento de las expresiones regulares.
Terminaremos con una encuesta de otros lugares en el tidyverse y base R donde podría usar expresiones regulares.

### Requisitos previos

En este capítulo, usaremos funciones de expresiones regulares de stringr y tidyr, ambos miembros centrales de tidyverse, así como datos del paquete babynames.

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(babynames)
```

A lo largo de este capítulo, usaremos una combinación de ejemplos en línea muy simples para que pueda obtener la idea básica, los datos de nombres de bebés y tres vectores de caracteres de stringr:

-   `fruit` contiene los nombres de 80 frutas.
-   `words` contiene 980 palabras comunes del ideoma inglés.
-   `sentences` contiene 720 oraciones cortas.

## Conceptos básicos de patrones {#sec-reg-basics}

Usaremos `str_view()` para aprender cómo funcionan los patrones de expresiones regulares.
Usamos `str_view()` en el último capítulo para comprender mejor una cadena en comparación con su representación impresa, y ahora la usaremos con su segundo argumento, una expresión regular.
Cuando se proporciona, `str_view()` mostrará solo los elementos del vector de cadena que coincidan, rodeando cada coincidencia con `<>` y, donde sea posible, resaltando la coincidencia en azul.

Los patrones más simples consisten en letras y números que coinciden exactamente con esos caracteres:

```{r}
str_view(fruit, "berry")
```

Las letras y los números coinciden exactamente y se denominan **caracteres literales**.
La mayoría de los caracteres de puntuación, como `.`, `+`, `*`, `[`, `],` y `?,` tienen significados especiales[^regexps-2] y se denominan **metacaracteres**. Por ejemplo, `.`
coincidirá con cualquier carácter[^regexps-3], por lo que `"a."` coincidirá con cualquier cadena que contenga una "a" seguida de otro carácter
:

[^regexps-2]: Aprenderá cómo escapar de estos significados especiales en @sec-regexp-escaping.

[^regexps-3]: Bueno, cualquier carácter aparte de `\n`.

```{r}
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
```

O podríamos encontrar todas las frutas que contienen una "a", seguida de tres letras, seguidas de una "e":

```{r}
str_view(fruit, "a...e")
```

**Quantifiers** controla cuántas veces puede coincidir un patrón:

-   `?` hace que un patrón sea opcional (es decir, coincide 0 o 1 veces)
-   `+` permite que un patrón se repita (es decir, coincide al menos una vez)
-   `*` permite que un patrón sea opcional o se repita (es decir, coincide con cualquier número de veces, incluido 0).

```{r}
# ab? coincide con una "a", opcionalmente seguida de una "b".
str_view(c("a", "ab", "abb"), "ab?")

# ab+ Coincide con una "a", seguida de al menos una "b".
str_view(c("a", "ab", "abb"), "ab+")

# ab* coincide con una "a", seguida de cualquier número de "b".
str_view(c("a", "ab", "abb"), "ab*")
```

**Las clases de caracteres** están definidas por `[]` y le permiten hacer coincidir un conjunto de caracteres, p.ej., `[abcd]` coincide con "a", "b", "c" o "d".
También puede invertir la coincidencia comenzando con `^`: `[^abcd]` coincide con cualquier cosa **excepto** "a", "b", "c" o "d".
Podemos usar esta idea para encontrar las palabras que contienen una "x" rodeada de vocales, o una "y" rodeada de consonantes:

```{r}
str_view(words, "[aeiou]x[aeiou]")
str_view(words, "[^aeiou]y[^aeiou]")
```

Puede usar **alternancia**, `|`, para elegir entre uno o más patrones alternativos.
Por ejemplo, los siguientes patrones buscan frutas que contengan "manzana", "melón" o "nuez", o una vocal repetida.

```{r}
str_view(fruit, "apple|melon|nut")
str_view(fruit, "aa|ee|ii|oo|uu")
```

Las expresiones regulares son muy compactas y utilizan muchos caracteres de puntuación, por lo que al principio pueden parecer abrumadoras y difíciles de leer.
No te preocupes; mejorará con la práctica, y los patrones simples pronto se convertirán en una segunda naturaleza.
Comencemos ese proceso practicando con algunas funciones útiles de stringr.

## Funciones clave {#sec-stringr-regex-funs}

Ahora que tiene los conceptos básicos de las expresiones regulares bajo su cinturón, usémoslos con algunas funciones stringr y tidyr.
En la siguiente sección, aprenderá cómo detectar la presencia o ausencia de una coincidencia, cómo contar el número de coincidencias, cómo reemplazar una coincidencia con texto fijo y cómo extraer texto usando un patrón.

### Detectar coincidencias

`str_detect()` devuelve un vector lógico que es `TRUE` si el patrón coincide con un elemento del vector de caracteres y `FALSE` en caso contrario:

```{r}
str_detect(c("a", "b", "c"), "[aeiou]")
```

Dado que `str_detect()` devuelve un vector lógico de la misma longitud que el vector inicial, se empareja bien con `filter()`.
Por ejemplo, este código encuentra todos los nombres más populares que contienen una "x" minúscula:

```{r}
babynames |> 
  filter(str_detect(name, "x")) |> 
  count(name, wt = n, sort = TRUE)
```

También podemos usar `str_detect()` con `summarize()` combinándolo con `sum()` o `mean()`: `sum(str_detect(x, pattern))` te dice el número de observaciones que coinciden y `mean(str_detect(x, pattern))` te dice la proporción que coincide.
Por ejemplo, el siguiente fragmento calcula y visualiza la proporción de nombres de bebés[^regexps-4] que contienen "x", desglosados por año.
¡Parece que su popularidad ha aumentado radicalmente últimamente!

[^regexps-4]: Esto nos da la proporción de **nombres** que contienen una "x"; si quisiera la proporción de bebés con un nombre que contiene una x, necesitaría realizar una media ponderada.

```{r}
#| fig-alt: >
#|   Una serie temporal que muestra la proporción de nombres de bebés que contienen la letra x.
#|   La proporción desciende gradualmente del 8 por 1000 en 1880 al 4 por 1000 en
#|   1980, luego aumenta rápidamente a 16 por 1000 en 2019.

babynames |> 
  group_by(year) |> 
  summarize(prop_x = mean(str_detect(name, "x"))) |> 
  ggplot(aes(x = year, y = prop_x)) + 
  geom_line()
```

Hay dos funciones que están estrechamente relacionadas con `str_detect()`: `str_subset()` y `str_which()`.
`str_subset()` devuelve solo las cadenas que contienen coincidencia.
`str_which()` devuelve los índices de las cadenas que tienen coincidencia:

### Contar coincidencias

El siguiente paso en complejidad de `str_detect()` es `str_count()`: en lugar de verdadero o falso, le dice cuántas coincidencias hay en cada cadena.

```{r}
x <- c("apple", "banana", "pear")
str_count(x, "p")
```

Tenga en cuenta que cada coincidencia comienza al final de la coincidencia anterior, es decir, las coincidencias de expresiones regulares nunca se superponen.
Por ejemplo, en `"abababa"`, ¿cuántas veces coincidirá el patrón `"aba"`?
Las expresiones regulares dicen dos, no tres:

```{r}
str_count("abababa", "aba")
str_view("abababa", "aba")
```

Es natural usar `str_count()` con `mutate()`.
El siguiente ejemplo usa `str_count()` con clases de caracteres para contar el número de vocales y consonantes en cada nombre.

```{r}
babynames |> 
  count(name) |> 
  mutate(
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )
```

Si miras de cerca, notarás que hay algo mal con nuestros cálculos: "Aaban" contiene tres "a", pero nuestro resumen solo reporta dos vocales.
Eso es porque las expresiones regulares distinguen entre mayúsculas y minúsculas.
Hay tres formas en las que podemos arreglar esto:

-   Agregue las vocales mayúsculas a la clase de carácter: `str_count(name, "[aeiouAEIOU]")`.
-   Dígale a la expresión regular que ignore el tamaño: `str_count(name, regex("[aeiou]", ignore_case = TRUE))`. Hablaremos de más en @sec-flags.
-   Usa `str_to_lower()` para convertir los nombres a minúsculas: `str_count(str_to_lower(name), "[aeiou]")`.

Esta variedad de enfoques es bastante típica cuando se trabaja con cadenas; a menudo, hay varias formas de alcanzar su objetivo, ya sea haciendo que su patrón sea más complicado o haciendo un preprocesamiento en su cadena.
Si se queda atascado intentando un enfoque, a menudo puede ser útil cambiar de marcha y abordar el problema desde una perspectiva diferente.

En este caso, dado que estamos aplicando dos funciones al nombre, creo que es más fácil transformarlo primero:

```{r}
babynames |> 
  count(name) |> 
  mutate(
    name = str_to_lower(name),
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )
```

### Reemplazar valores

Además de detectar y contar coincidencias, también podemos modificarlas con `str_replace()` y `str_replace_all()`.
`str_replace()` reemplaza la primera coincidencia y, como sugiere el nombre, `str_replace_all()` reemplaza todas las coincidencias.

```{r}
x <- c("apple", "pear", "banana")
str_replace_all(x, "[aeiou]", "-")
```

`str_remove()` y `str_remove_all()` son atajos útiles para `str_replace(x, patrón, "")`:

```{r}
x <- c("apple", "pear", "banana")
str_remove_all(x, "[aeiou]")
```

Estas funciones se combinan de forma natural con `mutate()` al realizar la limpieza de datos y, a menudo, las aplicará repetidamente para quitar capas de formato inconsistente.

### Extraer variables {#sec-extract-variables}

La última función que discutiremos usa expresiones regulares para extraer datos de una columna en una o más columnas nuevas: `separate_wider_regex()`.
Es un par de las funciones `separate_wider_position()` y `separate_wider_delim()` que aprendiste en @sec-string-columns.
Estas funciones viven en tidyr porque operan en (columnas de) data frames, en lugar de vectores individuales.

Vamos a crear un conjunto de datos simple para mostrar cómo funciona.
Aquí tenemos algunos datos derivados de `babynames` donde tenemos el nombre, el género y la edad de un grupo de personas en un formato bastante extraño [^regexps-5]:

[^regexps-5]: Desearíamos poder asegurarle que nunca verá algo tan extraño en la vida real, pero desafortunadamente en el transcurso de su carrera es probable que vea cosas mucho más extrañas.

```{r}
df <- tribble(
  ~str,
  "<Sheryl>-F_34",
  "<Kisha>-F_45", 
  "<Brandon>-N_33",
  "<Sharon>-F_38", 
  "<Penny>-F_58",
  "<Justin>-M_41", 
  "<Patricia>-F_84", 
)
```

Para extraer estos datos usando `separate_wider_regex()` solo necesitamos construir una secuencia de expresiones regulares que coincidan con cada pieza.
Si queremos que el contenido de esa pieza aparezca en la salida, le damos un nombre:

```{r}
df |> 
  separate_wider_regex(
    str,
    patterns = c(
      "<", 
      name = "[A-Za-z]+", 
      ">-", 
      gender = ".", "_", 
      age = "[0-9]+"
    )
  )
```

Si la coincidencia falla, puede usar `too_short = "debug"` para descubrir qué salió mal, al igual que `separate_wider_delim()` y `separate_wider_position()`.

### Ejercicios

1.  ¿Qué nombre de bebé tiene más vocales?
    ¿Qué nombre tiene la mayor proporción de vocales?
    (Pista: ¿cuál es el denominador?)

2.  Reemplace todas las barras diagonales en `"a/b/c/d/e"` con barras invertidas.
    ¿Qué sucede si intenta deshacer la transformación reemplazando todas las barras diagonales inversas con barras diagonales?
    (Discutiremos el problema muy pronto).

3.  Implemente una versión simple de `str_to_lower()` usando `str_replace_all()`.

4.  Cree una expresión regular que coincida con los números de teléfono tal como se escriben comúnmente en su país.

## Detalles del patrón

Ahora que comprende los conceptos básicos del lenguaje de patrones y cómo usarlo con algunas funciones stringr y tidyr, es hora de profundizar en más detalles.
Primero, comenzaremos con **escapar**, lo que le permite unir metacaracteres que de otro modo serían tratados de manera especial.
A continuación, aprenderá sobre **anclajes** que le permiten hacer coincidir el inicio o el final de la cadena.
Luego, aprenderá más sobre las **clases de caracteres** y sus accesos directos que le permiten hacer coincidir cualquier carácter de un conjunto.
A continuación, conocerá los detalles finales de los **cuantificadores** que controlan cuántas veces puede coincidir un patrón.
Luego, tenemos que cubrir el tema importante (pero complejo) de **precedencia de operadores** y paréntesis.
Y terminaremos con algunos detalles de **agrupación** de componentes de patrones.

Los términos que usamos aquí son los nombres técnicos de cada componente.
No siempre son los más evocadores de su propósito, pero es muy útil conocer los términos correctos si luego desea buscar en Google para obtener más detalles.

### Escapar {#sec-regexp-escaping}

Para hacer coincidir un `.` literal, necesita un **escape** que le indique a la expresión regular que coincida con los metacaracteres[^regexps-6] literalmente.
Al igual que las cadenas, las expresiones regulares usan la barra invertida para escapar.
Entonces, para hacer coincidir un `.`, necesita la expresión regular `\.`. Desafortunadamente esto crea un problema.
Usamos cadenas para representar expresiones regulares, y `\` también se usa como símbolo de escape en cadenas.
Así que para crear la expresión regular `\.` necesitamos la cadena `"\\."`, como muestra el siguiente ejemplo.

[^regexps-6]: El conjunto completo de metacaracteres es `.^$\|*+?{}[]()`

```{r}
# Para crear la expresión regular \., necesitamos usar \\.
dot <- "\\."

# Pero la expresión en sí solo contiene una \
str_view(dot)

# Y esto le dice a R que busque una explicita.
str_view(c("abc", "a.c", "bef"), "a\\.c")
```

En este libro, normalmente escribiremos expresiones regulares sin comillas, como `\.`.
Si necesitamos enfatizar lo que realmente escribirá, lo rodearemos con comillas y agregaremos escapes adicionales, como `"\\."`.

Si `\` se usa como un carácter de escape en expresiones regulares, ¿cómo hace coincidir un literal `\`?
Bueno, necesitas escapar, creando la expresión regular `\\`.
Para crear esa expresión regular, debe usar una cadena, que también debe escapar de `\`.
Eso significa que para hacer coincidir un `\` literal, debe escribir `"\\\\"` --- ¡necesita cuatro barras diagonales inversas para que coincida con uno!

```{r}
x <- "a\\b"
str_view(x)
str_view(x, "\\\\")
```

Alternativamente, puede que le resulte más fácil usar las cadenas sin formato que aprendió en @sec-raw-strings).
Eso le permite evitar una capa de escape:

```{r}
str_view(x, r"{\\}")
```

Si está tratando de hacer coincidir un literal `.`, `$`, `|`, `*`, `+`, `?`, `{`, `}`, `(`, `)`, hay una alternativa al uso de un escape de barra invertida: puede usar una clase de carácter: `[.]`, `[$]`, `[|]`, \...
todos coinciden con los valores literales.

```{r}
str_view(c("abc", "a.c", "a*c", "a c"), "a[.]c")
str_view(c("abc", "a.c", "a*c", "a c"), ".[*]c")
```

### Anclajes

De forma predeterminada, las expresiones regulares coincidirán con cualquier parte de una cadena.
Si desea hacer coincidir al principio del final, necesita **anclar** la expresión regular usando `^` para que coincida con el comienzo de la cadena o `$` para que coincida con el final:

```{r}
str_view(fruit, "^a")
str_view(fruit, "a$")
```

Es tentador pensar que `$` debería coincidir con el comienzo de una cadena, porque así es como escribimos cantidades en dólares, pero no es lo que quieren las expresiones regulares.

Para obligar a una expresión regular a coincidir solo con la cadena completa, asegúrela con `^` y `$`:

```{r}
str_view(fruit, "apple")
str_view(fruit, "^apple$")
```

También puede hacer coincidir el límite entre palabras (es decir, el comienzo o el final de una palabra) con `\b`.
Esto puede ser particularmente útil cuando se usa la herramienta de búsqueda y reemplazo de RStudio.
Por ejemplo, si para encontrar todos los usos de `sum()`, puede buscar `\bsum\b` para evitar la coincidencia de `summarize`, `summary`, `rowsum` y así sucesivamente:

```{r}
x <- c("summary(x)", "summarize(df)", "rowsum(x)", "sum(x)")
str_view(x, "sum")
str_view(x, "\\bsum\\b")
```

Cuando se usan solos, los anclajes producirán una coincidencia de ancho cero:

```{r}
str_view("abc", c("$", "^", "\\b"))
```

Esto lo ayuda a comprender lo que sucede cuando reemplaza un ancla independiente:

```{r}
str_replace_all("abc", c("$", "^", "\\b"), "--")
```

### Clases de caracteres

Una **clase de carácter**, o un **conjunto** de caracteres, le permite hacer coincidir cualquier carácter en un conjunto.
Como discutimos anteriormente, puede construir sus propios conjuntos con `[]`, donde `[abc]` coincide con "a", "b" o "c" y `[^abc]` coincide con cualquier carácter excepto "a".
, "b" o "c".
Además de `^`, hay otros dos caracteres que tienen un significado especial dentro de `[]:`

-   `-` define un rango, p.ej., `[a-z]` coincide con cualquier letra minúscula y `[0-9]` coincide con cualquier número.
-   `\` eescapa a los caracteres especiales, por lo que `[\^\-\]]` coincide `^`, `-`, o `]`.

Aquí hay algunos ejemplos:

```{r}
x <- "abcd ABCD 12345 -!@#%."
str_view(x, "[abc]+")
str_view(x, "[a-z]+")
str_view(x, "[^a-z0-9]+")

# Necesita un escape para hacer coincidir caracteres que de otro modo son
# especial dentro de []
str_view("a-b-c", "[a-c]")
str_view("a-b-c", "[a\\-c]")
```

Algunas clases de caracteres se usan con tanta frecuencia que obtienen su propio atajo.
Ya has visto `.`, que coincide con cualquier carácter excepto una nueva línea.
Hay otros tres pares particularmente útiles[^regexps-7]:

[^regexps-7]: Recuerde, para crear una expresión regular que contenga `\d` o `\s`, deberá escapar del `\` para la cadena, por lo que escribirá `"\\d"` o `"\\s "`.

-   `\d` coincide con cualquier dígito;\
    `\D` coincide con cualquier cosa que no sea un dígito.
-   `\s` coincide con cualquier espacio en blanco (por ejemplo, espacio, tabulador, nueva línea);\
    `\S` coincide con cualquier cosa que no sea un espacio en blanco.
-   `\w` coincide con cualquier carácter de "palabra", es decir, letras y números;\
    `\W` coincide con cualquier carácter "no palabra".

El siguiente código muestra los seis atajos con una selección de letras, números y signos de puntuación.

```{r}
x <- "abcd ABCD 12345 -!@#%."
str_view(x, "\\d+")
str_view(x, "\\D+")
str_view(x, "\\s+")
str_view(x, "\\S+")
str_view(x, "\\w+")
str_view(x, "\\W+")
```

### Cuantificadores {#sec-quantifiers}

Los **cuantificadores** controlan cuántas veces coincide un patrón.
En @sec-reg-basics, aprendió sobre `?` (0 o 1 coincidencias), `+` (1 o más coincidencias) y `*` (0 o más coincidencias).
Por ejemplo, `colou?r` coincidirá con la ortografía estadounidense o británica, `\d+` coincidirá con uno o más dígitos y `\s?` coincidirá opcionalmente con un único elemento de espacio en blanco.
También puede especificar el número de coincidencias con precisión con `{}`:

-   `{n}` coincide exactamente n veces.
-   `{n,}` coincide al menos n veces.
-   `{n,m}` coincide entre n y m veces.

### Precedencia de operadores y paréntesis

¿Con qué coincide `ab+`?
¿Coincide con "a" seguido de una o más "b", o coincide con "ab" repetido cualquier número de veces?
¿Con qué coincide `^a|b$`?
¿Coincide con la cadena completa a o la cadena completa b, o coincide con una cadena que comienza con a o una cadena que termina con b?

La respuesta a estas preguntas está determinada por la precedencia de operadores, similar a las reglas PEMDAS o BEDMAS que quizás haya aprendido en la escuela.
Sabes que `a + b * c` es equivalente a `a + (b * c)` y no `(a + b) * c` porque `*` tiene mayor precedencia y `+` tiene menor precedencia: calculas `*` antes de `+`.

De manera similar, las expresiones regulares tienen sus propias reglas de precedencia: los cuantificadores tienen una precedencia alta y la alternancia tiene una precedencia baja, lo que significa que `ab+` es equivalente a `a(b+)`, y `^a|b$` es equivalente a `(^a )|(b$)`.
Al igual que con el álgebra, puede usar paréntesis para anular el orden habitual.
Pero a diferencia del álgebra, es poco probable que recuerdes las reglas de precedencia para las expresiones regulares, así que siéntete libre de usar paréntesis libremente.

### Agrupación y captura

Además de anular la precedencia de los operadores, los paréntesis tienen otro efecto importante: crean **grupos de captura** que le permiten usar subcomponentes de la coincidencia.

La primera forma de usar un grupo de captura es hacer referencia a él dentro de una coincidencia con **referencia posterior**: `\1` se refiere a la coincidencia contenida en el primer paréntesis, `\2` en el segundo paréntesis, y así sucesivamente.
Por ejemplo, el siguiente patrón encuentra todas las frutas que tienen un par de letras repetido:

```{r}
str_view(fruit, "(..)\\1")
```

Y este encuentra todas las palabras que comienzan y terminan con el mismo par de letras:

```{r}
str_view(words, "^(..).*\\1$")
```

También puede usar referencias anteriores en `str_replace()`.
Por ejemplo, este código cambia el orden de la segunda y tercera palabra en `sentences`:

```{r}
sentences |> 
  str_replace("(\\w+) (\\w+) (\\w+)", "\\1 \\3 \\2") |> 
  str_view()
```

Si desea extraer las coincidencias para cada grupo, puede usar `str_match()`.
Pero `str_match()` devuelve una matriz, por lo que no es particularmente fácil trabajar con [^regexps-8]:

[^regexps-8]: `comments = TRUE` es particularmente efectivo en combinación con una cadena sin procesar, como la que usamos aquí.

```{r}
sentences |> 
  str_match("the (\\w+) (\\w+)") |> 
  head()
```

Puede convertir a un tibble y nombrar las columnas:

```{r}
sentences |> 
  str_match("the (\\w+) (\\w+)") |> 
  as_tibble(.name_repair = "minimal") |> 
  set_names("match", "word1", "word2")
```

Pero luego básicamente ha recreado su propia versión de `separate_wider_regex()`.
De hecho, detrás de escena, `separate_wider_regex()` convierte su vector de patrones en una sola expresión regular que utiliza la agrupación para capturar los componentes nombrados.

Ocasionalmente, querrá usar paréntesis sin crear grupos coincidentes.
Puede crear un grupo que no captura con `(?:)`.

```{r}
x <- c("a gray cat", "a grey dog")
str_match(x, "gr(e|a)y")
str_match(x, "gr(?:e|a)y")
```

### Ejercicios

1.  ¿Cómo haría coincidir la cadena literal `"'\`? ¿Qué tal `"$^$"`?

2.  Explique por qué cada uno de estos patrones no coincide con `\`: `"\"`, `"\\"`, `"\\\"`.

3.  Dado el corpus de palabras comunes en `stringr::words`, cree expresiones regulares que encuentren todas las palabras que:

    a.  Empiezan con "y".
    b.  No empiezan con "y".
    c.  Terminan con "x".
    d.  Tienen exactamente tres letras de largo. (¡No hagas trampa usando `str_length()`!)
    e.  Tener siete letras o más.
    f.  Contienen un par de vocales y consonantes.
    g.  Contener al menos dos pares de vocales y consonantes seguidos.
    h.  Sólo consisten en pares repetidos de vocales y consonantes.

4.  Cree 11 expresiones regulares que coincidan con la ortografía británica o estadounidense para cada una de las siguientes palabras: airplane/aeroplane, aluminum/aluminium, analog/analogue, ass/arse, center/centre, defense/defence, donut/doughnut, gray/grey, modeling/modelling, skeptic/sceptic, summarize/summarise.
    ¡Intenta hacer la expresión regular más corta posible!

5.  Cambia la primera y la última letra en `palabras`.
    ¿Cuáles de esas cadenas siguen siendo `palabras`?

6.  Describa con palabras con qué coinciden estas expresiones regulares: (lea atentamente para ver si cada entrada es una expresión regular o una cadena que define una expresión regular).

    a.  `^.*$`
    b.  `"\\{.+\\}"`
    c.  `\d{4}-\d{2}-\d{2}`
    d.  `"\\\\{4}"`
    e.  `\..\..\..`
    f.  `(.)\1\1`
    g.  `"(..)\\1"`

7.  Resuelva los crucigramas de expresiones regulares para principiantes en <https://regexcrossword.com/challenges/beginner>.

## Control de patrones

Es posible ejercer un control adicional sobre los detalles de la coincidencia mediante el uso de un objeto de patrón en lugar de solo una cadena.
Esto le permite controlar los llamados indicadores de expresiones regulares y hacer coincidir varios tipos de cadenas fijas, como se describe a continuación.

### Banderas de expresiones regulares {#sec-flags}

Hay una serie de configuraciones que se pueden usar para controlar los detalles de la expresión regular.
Estas configuraciones a menudo se denominan **banderas** en otros lenguajes de programación.
En stringr, puede usarlos envolviendo el patrón en una llamada a `regex()`.
La bandera más útil es probablemente `ignore_case = TRUE` porque permite que los caracteres coincidan con sus formas mayúsculas o minúsculas:

```{r}
bananas <- c("banana", "Banana", "BANANA")
str_view(bananas, "banana")
str_view(bananas, regex("banana", ignore_case = TRUE))
```

Si está trabajando mucho con cadenas multilínea (es decir, cadenas que contienen `\n`), `dotall` y `multiline` también pueden ser útiles:

-   `dotall = TRUE` permite que `.` coincida con todo, incluido `\n`:

    ```{r}
    x <- "Line 1\nLine 2\nLine 3"
    str_view(x, ".Line")
    str_view(x, regex(".Line", dotall = TRUE))
    ```

-   `multiline = TRUE` hace que `^` y `$` coincidan con el inicio y el final de cada línea en lugar del inicio y el final de la cadena completa:

    ```{r}
    x <- "Line 1\nLine 2\nLine 3"
    str_view(x, "^Line")
    str_view(x, regex("^Line", multiline = TRUE))
    ```

Finalmente, si está escribiendo una expresión regular complicada y le preocupa no entenderla en el futuro, puede probar `comentarios = TRUE`.
Ajusta el lenguaje de patrones para ignorar los espacios y las líneas nuevas, así como todo lo que se encuentra después de `#`.
Esto le permite usar comentarios y espacios en blanco para hacer que las expresiones regulares complejas sean más comprensibles[^regexps-9], como en el siguiente ejemplo:

[^regexps-9]: `comments = TRUE` es particularmente efectivo en combinación con una cadena sin procesar, como la que usamos aquí.

```{r}
phone <- regex(
  r"(
    \(?     # paréntesis de apertura opcionales
    (\d{3}) # área de codigo
    [)\-]?  # paréntesis o guión de cierre opcionales
    \ ?     # spacio opcional
    (\d{3}) # otros tres números
    [\ -]?  # espacio o guión opcional
    (\d{4}) # cuatro números más
  )", 
  comments = TRUE
)

str_extract(c("514-791-8141", "(123) 456 7890", "123456"), phone)
```

Si está utilizando comentarios y desea hacer coincidir un espacio, una nueva línea o `#`, deberá escapar con `\`.

### Coincidencias fijas

Puede optar por no participar en las reglas de expresiones regulares utilizando `fixed()`:

```{r}
str_view(c("", "a", "."), fixed("."))
```

`fixed()` también le da la posibilidad de ignorar mayúsculas y minúsculas:

```{r}
str_view("x X", "X")
str_view("x X", fixed("X", ignore_case = TRUE))
```

Si está trabajando con texto que no está en inglés, probablemente querrá `coll()` en lugar de `fixed()`, ya que implementa las reglas completas para el uso de mayúsculas tal como las usa el `locale` que especifique.
Consulte @sec-other-languages para obtener más detalles sobre las configuraciones regionales.

```{r}
str_view("i İ ı I", fixed("İ", ignore_case = TRUE))
str_view("i İ ı I", coll("İ", ignore_case = TRUE, locale = "tr"))
```

## Práctica

Para poner en práctica estas ideas, resolveremos a continuación algunos problemas semiauténticos.
Discutiremos tres técnicas generales:

1.  Comprobar su trabajo mediante la creación de controles positivos y negativos simples
2.  Combinar expresiones regulares con álgebra booleana
3.  Crear patrones complejos usando la manipulación de cadenas

### Revisa tu trabajo

Primero, encontremos todas las oraciones que comienzan con `The`.
Usar el ancla `^` solo no es suficiente:

```{r}
str_view(sentences, "^The")
```

Porque ese patrón también coincide con oraciones que comienzan con palabras como `They` o `These`.
Necesitamos asegurarnos de que la "e" sea la última letra de la palabra, lo que podemos hacer agregando un límite de palabra:

```{r}
str_view(sentences, "^The\\b")
```

¿Qué hay de encontrar todas las oraciones que comienzan con un pronombre?

```{r}
str_view(sentences, "^She|He|It|They\\b")
```

Una inspección rápida de los resultados muestra que estamos obteniendo algunas coincidencias falsas.
Eso es porque nos hemos olvidado de usar paréntesis:

```{r}
str_view(sentences, "^(She|He|It|They)\\b")
```

Quizás se pregunte cómo podría detectar tal error si no ocurrió en las primeras coincidencias.
Una buena técnica es crear algunas coincidencias positivas y negativas y usarlas para probar que su patrón funciona como se esperaba:

```{r}
pos <- c("He is a boy", "She had a good time")
neg <- c("Shells come from the sea", "Hadley said 'It's a great day'")

pattern <- "^(She|He|It|They)\\b"
str_detect(pos, pattern)
str_detect(neg, pattern)
```

Por lo general, es mucho más fácil encontrar buenos ejemplos positivos que ejemplos negativos, porque toma un tiempo antes de que seas lo suficientemente bueno con las expresiones regulares para predecir dónde están tus debilidades.
Sin embargo, siguen siendo útiles: a medida que trabaja en el problema, puede acumular lentamente una colección de sus errores, asegurándose de que nunca cometerá el mismo error dos veces.

### Operaciones booleanas {#sec-boolean-operations}

Imagina que queremos encontrar palabras que solo contengan consonantes.
Una técnica es crear una clase de carácter que contenga todas las letras excepto las vocales (`[^aeiou]`), luego permitir que coincida con cualquier número de letras (`[^aeiou]+`), luego forzarlo a que coincida con el toda la cadena anclándola al principio y al final (`^[^aeiou]+$`):

```{r}
str_view(words, "^[^aeiou]+$")
```

Pero puedes hacer que este problema sea un poco más fácil dándole la vuelta al problema.
En lugar de buscar palabras que contengan solo consonantes, podríamos buscar palabras que no contengan vocales:

```{r}
str_view(words[!str_detect(words, "[aeiou]")])
```

Esta es una técnica útil siempre que se trate de combinaciones lógicas, particularmente aquellas que involucran "y" o "no".
Por ejemplo, imagina si quieres encontrar todas las palabras que contienen "a" y "b".
No hay un operador "y" integrado en las expresiones regulares, por lo que debemos abordarlo buscando todas las palabras que contengan una "a" seguida de una "b" o una "b" seguida de una "a":

```{r}
str_view(words, "a.*b|b.*a")
```

Es más sencillo combinar los resultados de dos llamadas para `str_detect()`:

```{r}
words[str_detect(words, "a") & str_detect(words, "b")]
```

¿Qué pasaría si quisiéramos ver si hay una palabra que contiene todas las vocales?
¡Si lo hiciéramos con patrones, necesitaríamos generar 5!
(120) patrones diferentes:

```{r}
#| results: false
words[str_detect(words, "a.*e.*i.*o.*u")]
# ...
words[str_detect(words, "u.*o.*i.*e.*a")]
```

Es mucho más sencillo combinar cinco llamadas para `str_detect()`:

```{r}
words[
  str_detect(words, "a") &
  str_detect(words, "e") &
  str_detect(words, "i") &
  str_detect(words, "o") &
  str_detect(words, "u")
]
```

En general, si te quedas atascado tratando de crear una única expresión regular que resuelva tu problema, da un paso atrás y piensa si podrías dividir el problema en partes más pequeñas, resolviendo cada desafío antes de pasar al siguiente.

### Crear un patrón con código

¿Qué pasaría si quisiéramos encontrar todas las 'oraciones' que mencionan un color?
La idea básica es simple: simplemente combinamos alternancia con límites de palabras.

```{r}
str_view(sentences, "\\b(red|green|blue)\\b")
```

Pero a medida que aumenta la cantidad de colores, rápidamente se vuelve tedioso construir este patrón a mano.
¿No sería bueno si pudiéramos almacenar los colores en un vector?

```{r}
rgb <- c("red", "green", "blue")
```

Bueno, ¡podemos!
Solo necesitamos crear el patrón a partir del vector usando `str_c()` y `str_flatten()`:

```{r}
str_c("\\b(", str_flatten(rgb, "|"), ")\\b")
```

Podríamos hacer este patrón más completo si tuviéramos una buena lista de colores.
Un lugar desde el que podríamos comenzar es la lista de colores incorporados que R puede usar para los gráficos:

```{r}
str_view(colors())
```

Pero primero eliminemos las variantes numeradas:

```{r}
cols <- colors()
cols <- cols[!str_detect(cols, "\\d")]
str_view(cols)
```

Entonces podemos convertir esto en un patrón gigante.
No mostraremos el patrón aquí porque es enorme, pero puedes verlo funcionar:

```{r}
pattern <- str_c("\\b(", str_flatten(cols, "|"), ")\\b")
str_view(sentences, pattern)
```

En este ejemplo, `cols` solo contiene números y letras, por lo que no debe preocuparse por los metacaracteres.
Pero, en general, siempre que cree patrones a partir de cadenas existentes, es aconsejable ejecutarlos a través de `str_escape()` para asegurarse de que coincidan literalmente.

### Ejercicios

1.  Para cada uno de los siguientes desafíos, intente resolverlos usando una sola expresión regular y una combinación de múltiples llamadas `str_detect()`.

    a.  Encuentra todas las `palabras` que comienzan o terminan con `x`.
    b.  Encuentra todas las `palabras` que comienzan con una vocal y terminan con una consonante.
    c.  ¿Hay alguna `palabra` que contenga al menos una de cada vocal diferente?

2.  ¿Construye patrones para encontrar evidencia a favor y en contra de la regla "i antes de e excepto después de c"?

3.  `colors()` contiene una serie de modificadores como "lightgray" y "darkblue".
    ¿Cómo podría identificar automáticamente estos modificadores?
    (Piense en cómo podría detectar y luego eliminar los colores que se modifican).

4.  Cree una expresión regular que encuentre cualquier conjunto de datos base de R.
    Puede obtener una lista de estos conjuntos de datos mediante un uso especial de la función `data()`: `data(package = "datasets")$results[, "Item"]`.
    Tenga en cuenta que varios conjuntos de datos antiguos son vectores individuales; estos contienen el nombre del "data frame" de agrupación entre paréntesis, por lo que deberá eliminarlos.

## Expresiones regulares en otros lugares

Al igual que en las funciones stringr y tidyr, hay muchos otros lugares en R donde puede usar expresiones regulares.
Las siguientes secciones describen algunas otras funciones útiles en el tidyverse más amplio y la base R.

### tidyverse

Hay otros tres lugares particularmente útiles en los que es posible que desee utilizar expresiones regulares

-   `matches(pattern)` seleccionará todas las variables cuyo nombre coincida con el patrón proporcionado.
    Es una función "tidyselect" que puede usar en cualquier lugar en cualquier función tidyverse que seleccione variables (p.ej., `select()`, `rename_with()` y `across()`).

-   `pivot_longer()'s` `names_pattern` aargumento toma un vector de expresiones regulares, al igual que `separate_wider_regex()`.
    Es útil cuando se extraen datos de nombres de variables con una estructura compleja.

-   El argumento `delim` en `separate_longer_delim()` y `separate_wider_delim()` generalmente coincide con una cadena fija, pero puede usar `regex()` para que coincida con un patrón.
    Esto es útil, por ejemplo, si desea hacer coincidir una coma seguida opcionalmente por un espacio, es decir, `regex(", ?")`.

### R base

`apropos(pattern)` busca todos los objetos disponibles del entorno global que coincidan con el patrón dado.
Esto es útil si no puede recordar el nombre de una función:

```{r}
apropos("replace")
```

`list.files(path, pattern)` enumera todos los archivos en `path` que coinciden con una expresión regular `pattern`.
Por ejemplo, puede encontrar todos los archivos R Markdown en el directorio actual con:

```{r}
head(list.files(pattern = "\\.Rmd$"))
```

Vale la pena señalar que el lenguaje de patrones usado por base R es ligeramente diferente al usado por stringr.
Esto se debe a que stringr está construido sobre el [paquete stringi](https://stringi.gagolewski.com), que a su vez está construido sobre el [motor ICU](https://unicode-org.github.io%20/icu/userguide/strings/regexp.html), mientras que las funciones básicas de R usan el [motor TRE](https://github.com/laurikari/tre) o el [motor PCRE](https://www.pcre%20.org), dependiendo de si ha establecido o no `perl = TRUE`.
Afortunadamente, los conceptos básicos de las expresiones regulares están tan bien establecidos que encontrará pocas variaciones cuando trabaje con los patrones que aprenderá en este libro.
Solo debe ser consciente de la diferencia cuando comience a confiar en funciones avanzadas como rangos de caracteres Unicode complejos o funciones especiales que usan la sintaxis `(?…)`.

## Resumen

Con cada carácter de puntuación potencialmente sobrecargado de significado, las expresiones regulares son uno de los lenguajes más compactos que existen.
Definitivamente son confusos al principio, pero a medida que entrenas tus ojos para leerlos y tu cerebro para entenderlos, desbloqueas una habilidad poderosa que puedes usar en R y en muchos otros lugares.

En este capítulo, ha comenzado su viaje para convertirse en un maestro de las expresiones regulares aprendiendo las funciones más útiles de stringr y los componentes más importantes del lenguaje de expresiones regulares.
Y hay muchos recursos para aprender más.

Un buen lugar para comenzar es `vignette("regular-expressions", package = "stringr")`: documenta el conjunto completo de sintaxis compatible con stringr.
Otra referencia útil es [https://www.regular-expressions.info/](https://www.regular-expressions.info/tutorial.html).
No es específico de R, pero puede usarlo para conocer las características más avanzadas de las expresiones regulares y cómo funcionan bajo el capó.

También es bueno saber que stringr está implementado sobre el paquete stringi por Marek Gagolewski.
Si tiene dificultades para encontrar una función que haga lo que necesita en stringr, no tenga miedo de buscar en stringi.
Encontrará que stringi es muy fácil de aprender porque sigue muchas de las mismas convenciones que stringr.

En el próximo capítulo, hablaremos sobre una estructura de datos estrechamente relacionada con las cadenas: los factores.
Los factores se utilizan para representar datos categóricos en R, es decir, datos con un conjunto fijo y conocido de valores posibles identificados por un vector de cadenas.
